import sys
import os
import fnmatch
import pprint
import shutil
import zipfile
from pathlib import Path

basePath = os.path.dirname(sys.argv[0]).replace("\\", "/")

header = '''# Veg - NOT USED ANYMORE
# Soil - NOT USED ANYMORE
# Max In
# Min In
# Min Out
# Max Out
# Rescale Min-Max
# INPUT RASTER
# OUTPUT RASTER
# Global Minimum
# Calculation
# Global Maximum
# Calculation
# Input VI Masked and Mosaic
# Max - SD*1.5
# SD*1.5 + MIN
# fC Model: MIN(SD) = Soil; MAX(SD) = Veg
# Output Data (1) fC Interger Unscaled
# Output Data (2) fC Rescaled 0 - 100 floating Point
# Output Data (3) fC Rescaled 0 - 100 Interger
#
# set cell size for the model
#
SET CELLSIZE MIN;
#
# set window for the model
#
SET WINDOW INTERSECTION;
#
# set area of interest for the model
#
SET AOI NONE;
#
# declarations
#
'''

def CheckOutputDir():
    if not os.path.exists(basePath + '/NDVI/ndvi_mos_fc'):
        os.makedirs(basePath + '/NDVI/ndvi_mos_fc')

def FindModelerExe():
    if not os.path.exists(basePath + '/modeler_location.txt'):
        f = open(basePath + '/modeler_location.txt', 'w')
        searchdir = [] #list of possible ERDAS install locations
        for root, dirs, files in os.walk('C:\Program Files\\'):
            for dir in dirs:
                if dir == 'Hexagon':
                    searchdir.append(os.path.join(root, dir))
                    print (os.path.join(root,dir))
        for i in range (0, len(searchdir)):
            for root, dirs, files in os.walk(searchdir[i]):
                for exe in fnmatch.filter(files, '*.exe'):
                    if exe == 'modeler.exe':
                        modeler = os.path.join(root, exe)
                    elif exe == 'imagecommand.exe':
                        imagecommand = os.path.join(root, exe)
                    elif exe == 'imgcopy.exe':
                        imgcopy = os.path.join(root, exe)
        modeler = '"' + modeler + '" @'
        imagecommand = '"' + imagecommand + '" @'
        imgcopy = '"' + imgcopy + '" @'

        f.write("{}\n{}\n{}".format(modeler, imagecommand, imgcopy))
        f.close()
        return modeler, imagecommand, imgcopy
    f = open(basePath + '/modeler_location.txt')
    paths = []
    for line in f:
        paths.append(line.strip())
    f.close()
    return paths[0], paths[1], paths[2]

def get_ndvi_mosaic_files():
    ndvi_mosaic_files = []

    for root, dirs, files in os.walk(basePath + '/NDVI/ndvi_mosaic/'):
        for img in fnmatch.filter(files, "*.img"):
            ndvi_mosaic_files.append((os.path.join(root, img).replace("\\", "/"), img[:img.find('_ndvi_mos')]))
        break

    return ndvi_mosaic_files

def generate_batchlist(files, modeler):

    batchList = []

    for path, name in files:
        if not os.path.exists(basePath + '/NDVI/ndvi_mos_fc/' + name + '_ndvi_masked_mos_int_fc_unscaled.img'):

            name_original = name + "_ndvi_mos"
            name_unscaled = name + "_ndvi_masked_mos_int_fc_unscaled"
            name_scaled_int = name + "_ndvi_masked_mos_int_fc_scaled_int"
            name_scaled_fltp = name + "_ndvi_masked_mos_int_fc_scaled_fltp"
            parent_dir = basePath + '/NDVI/ndvi_mos_fc/'

            f = open(basePath + '/NDVI/ndvi_mos_fc/' + name + '_ndvi_mos_paramA', 'w')
            f.write(header)
            f.write('Float RASTER n1_{} FILE OLD PUBINPUT NEAREST NEIGHBOR AOI NONE "{}";\n'.format(name_original, path) +
                    'Integer RASTER n9_{} FILE NEW PUBOUT USEALL THEMATIC BIN DIRECT DEFAULT 8 BIT UNSIGNED INTEGER "{}.img";\n'.format(name_unscaled, parent_dir + name_unscaled) +
                    'Float RASTER n28_{} FILE NEW PUBOUT USEALL ATHEMATIC FLOAT SINGLE "{}.img";\n'.format(name_scaled_fltp, parent_dir + name_scaled_fltp) +
                    'Integer RASTER n48_{} FILE NEW PUBOUT USEALL THEMATIC BIN DIRECT DEFAULT 8 BIT UNSIGNED INTEGER "{}.img";\n'.format(name_scaled_int, parent_dir + name_scaled_int) +
                    'COLOR TABLE n12_Custom_Color [255];\n' +
                    'COLOR TABLE n14_Output COLORTABLE $n9_{};\n'.format(name_unscaled) +
                    'FLOAT TABLE n20_Output;\n' +
                    'FLOAT TABLE n23_Output;\n' +
                    'FLOAT TABLE n24_Output;\n' +
                    'FLOAT TABLE n25_Output;\n' +
                    'FLOAT TABLE n26_Output;\n' +
                    'FLOAT TABLE n38_Output;\n' +
                    'FLOAT TABLE n39_Output;\n' +
                    'COLOR TABLE n49_Custom_Color [100];\n' +
                    'COLOR TABLE n51_Output COLORTABLE $n48_{};\n'.format(name_scaled_int) +
                    'FLOAT SCALAR n6_Float;\n' +
                    'FLOAT SCALAR n7_Float;\n' +
                    'INTEGER SCALAR n29_Integer;\n' +
                    'INTEGER SCALAR n30_Integer;\n' +
                    'n6_Float = 42.55;\n' +
                    'n7_Float = 7.12;\n' +
                    '''n12_Custom_Color = TABLE(
		(0.823529, 0.705882, 0.54902),
		(0.820287, 0.704647, 0.546858),
		(0.817045, 0.703412, 0.544697),
		(0.813803, 0.702177, 0.542535),
		(0.81056, 0.700942, 0.540374),
		(0.807318, 0.699707, 0.538212),
		(0.804076, 0.698472, 0.536051),
		(0.800834, 0.697236, 0.533889),
		(0.797591, 0.696001, 0.531728),
		(0.794349, 0.694766, 0.529566),
		(0.791107, 0.693531, 0.527405),
		(0.787865, 0.692296, 0.525243),
		(0.784623, 0.691061, 0.523082),
		(0.78138, 0.689826, 0.52092),
		(0.778138, 0.68859, 0.518759),
		(0.774896, 0.687355, 0.516597),
		(0.771654, 0.68612, 0.514436),
		(0.768411, 0.684885, 0.512274),
		(0.765169, 0.68365, 0.510113),
		(0.761927, 0.682415, 0.507951),
		(0.758685, 0.68118, 0.50579),
		(0.755442, 0.679944, 0.503628),
		(0.7522, 0.678709, 0.501467),
		(0.748958, 0.677474, 0.499305),
		(0.745716, 0.676239, 0.497144),
		(0.742473, 0.675004, 0.494982),
		(0.739231, 0.673769, 0.492821),
		(0.735989, 0.672534, 0.490659),
		(0.732747, 0.671298, 0.488498),
		(0.729504, 0.670063, 0.486336),
		(0.726262, 0.668828, 0.484175),
		(0.72302, 0.667593, 0.482013),
		(0.719778, 0.666358, 0.479852),
		(0.716535, 0.665123, 0.47769),
		(0.713293, 0.663888, 0.475529),
		(0.710051, 0.662652, 0.473367),
		(0.706809, 0.661417, 0.471206),
		(0.703566, 0.660182, 0.469044),
		(0.700324, 0.658947, 0.466883),
		(0.697082, 0.657712, 0.464721),
		(0.69384, 0.656477, 0.46256),
		(0.690597, 0.655242, 0.460398),
		(0.687355, 0.654006, 0.458237),
		(0.684113, 0.652771, 0.456075),
		(0.680871, 0.651536, 0.453914),
		(0.677629, 0.650301, 0.451752),
		(0.674386, 0.649066, 0.449591),
		(0.671144, 0.647831, 0.447429),
		(0.667902, 0.646596, 0.445268),
		(0.66466, 0.645361, 0.443106),
		(0.661417, 0.644125, 0.440945),
		(0.658175, 0.64289, 0.438783),
		(0.654933, 0.641655, 0.436622),
		(0.651691, 0.64042, 0.43446),
		(0.648448, 0.639185, 0.432299),
		(0.645206, 0.63795, 0.430137),
		(0.641964, 0.636715, 0.427976),
		(0.638722, 0.635479, 0.425814),
		(0.635479, 0.634244, 0.423653),
		(0.632237, 0.633009, 0.421491),
		(0.628995, 0.631774, 0.41933),
		(0.625753, 0.630539, 0.417168),
		(0.62251, 0.629304, 0.415007),
		(0.619268, 0.628069, 0.412845),
		(0.616026, 0.626833, 0.410684),
		(0.612784, 0.625598, 0.408522),
		(0.609541, 0.624363, 0.406361),
		(0.606299, 0.623128, 0.404199),
		(0.603057, 0.621893, 0.402038),
		(0.599815, 0.620658, 0.399876),
		(0.596572, 0.619423, 0.397715),
		(0.59333, 0.618187, 0.395553),
		(0.590088, 0.616952, 0.393392),
		(0.586846, 0.615717, 0.391231),
		(0.583604, 0.614482, 0.389069),
		(0.580361, 0.613247, 0.386908),
		(0.577119, 0.612012, 0.384746),
		(0.573877, 0.610777, 0.382585),
		(0.570635, 0.609541, 0.380423),
		(0.567392, 0.608306, 0.378262),
		(0.56415, 0.607071, 0.3761),
		(0.560908, 0.605836, 0.373939),
		(0.557666, 0.604601, 0.371777),
		(0.554423, 0.603366, 0.369616),
		(0.551181, 0.602131, 0.367454),
		(0.547939, 0.600895, 0.365293),
		(0.544697, 0.59966, 0.363131),
		(0.541454, 0.598425, 0.36097),
		(0.538212, 0.59719, 0.358808),
		(0.53497, 0.595955, 0.356647),
		(0.531728, 0.59472, 0.354485),
		(0.528485, 0.593485, 0.352324),
		(0.525243, 0.592249, 0.350162),
		(0.522001, 0.591014, 0.348001),
		(0.518759, 0.589779, 0.345839),
		(0.515516, 0.588544, 0.343678),
		(0.512274, 0.587309, 0.341516),
		(0.509032, 0.586074, 0.339355),
		(0.50579, 0.584839, 0.337193),
		(0.502547, 0.583604, 0.335032),
		(0.499305, 0.582368, 0.33287),
		(0.496063, 0.581133, 0.330709),
		(0.492821, 0.579898, 0.328547),
		(0.489579, 0.578663, 0.326386),
		(0.486336, 0.577428, 0.324224),
		(0.483094, 0.576193, 0.322063),
		(0.479852, 0.574958, 0.319901),
		(0.47661, 0.573722, 0.31774),
		(0.473367, 0.572487, 0.315578),
		(0.470125, 0.571252, 0.313417),
		(0.466883, 0.570017, 0.311255),
		(0.463641, 0.568782, 0.309094),
		(0.460398, 0.567547, 0.306932),
		(0.457156, 0.566312, 0.304771),
		(0.453914, 0.565076, 0.302609),
		(0.450672, 0.563841, 0.300448),
		(0.447429, 0.562606, 0.298286),
		(0.444187, 0.561371, 0.296125),
		(0.440945, 0.560136, 0.293963),
		(0.437703, 0.558901, 0.291802),
		(0.43446, 0.557666, 0.28964),
		(0.431218, 0.55643, 0.287479),
		(0.427976, 0.555195, 0.285317),
		(0.424734, 0.55396, 0.283156),
		(0.421491, 0.552725, 0.280994),
		(0.418249, 0.55149, 0.278833),
		(0.415007, 0.550255, 0.276671),
		(0.411765, 0.54902, 0.27451),
		(0.408522, 0.547784, 0.272348),
		(0.40528, 0.546549, 0.270187),
		(0.402038, 0.545314, 0.268025),
		(0.398796, 0.544079, 0.265864),
		(0.395553, 0.542844, 0.263702),
		(0.392311, 0.541609, 0.261541),
		(0.389069, 0.540374, 0.259379),
		(0.385827, 0.539138, 0.257218),
		(0.382585, 0.537903, 0.255056),
		(0.379342, 0.536668, 0.252895),
		(0.3761, 0.535433, 0.250733),
		(0.372858, 0.534198, 0.248572),
		(0.369616, 0.532963, 0.24641),
		(0.366373, 0.531728, 0.244249),
		(0.363131, 0.530493, 0.242087),
		(0.359889, 0.529257, 0.239926),
		(0.356647, 0.528022, 0.237764),
		(0.353404, 0.526787, 0.235603),
		(0.350162, 0.525552, 0.233441),
		(0.34692, 0.524317, 0.23128),
		(0.343678, 0.523082, 0.229118),
		(0.340435, 0.521847, 0.226957),
		(0.337193, 0.520611, 0.224795),
		(0.333951, 0.519376, 0.222634),
		(0.330709, 0.518141, 0.220472),
		(0.327466, 0.516906, 0.218311),
		(0.324224, 0.515671, 0.216149),
		(0.320982, 0.514436, 0.213988),
		(0.31774, 0.513201, 0.211826),
		(0.314497, 0.511965, 0.209665),
		(0.311255, 0.51073, 0.207503),
		(0.308013, 0.509495, 0.205342),
		(0.304771, 0.50826, 0.20318),
		(0.301528, 0.507025, 0.201019),
		(0.298286, 0.50579, 0.198857),
		(0.295044, 0.504555, 0.196696),
		(0.291802, 0.503319, 0.194535),
		(0.28856, 0.502084, 0.192373),
		(0.285317, 0.500849, 0.190212),
		(0.282075, 0.499614, 0.18805),
		(0.278833, 0.498379, 0.185889),
		(0.275591, 0.497144, 0.183727),
		(0.272348, 0.495909, 0.181566),
		(0.269106, 0.494673, 0.179404),
		(0.265864, 0.493438, 0.177243),
		(0.262622, 0.492203, 0.175081),
		(0.259379, 0.490968, 0.17292),
		(0.256137, 0.489733, 0.170758),
		(0.252895, 0.488498, 0.168597),
		(0.249653, 0.487263, 0.166435),
		(0.24641, 0.486027, 0.164274),
		(0.243168, 0.484792, 0.162112),
		(0.239926, 0.483557, 0.159951),
		(0.236684, 0.482322, 0.157789),
		(0.233441, 0.481087, 0.155628),
		(0.230199, 0.479852, 0.153466),
		(0.226957, 0.478617, 0.151305),
		(0.223715, 0.477382, 0.149143),
		(0.220472, 0.476146, 0.146982),
		(0.21723, 0.474911, 0.14482),
		(0.213988, 0.473676, 0.142659),
		(0.210746, 0.472441, 0.140497),
		(0.207503, 0.471206, 0.138336),
		(0.204261, 0.469971, 0.136174),
		(0.201019, 0.468736, 0.134013),
		(0.197777, 0.4675, 0.131851),
		(0.194535, 0.466265, 0.12969),
		(0.191292, 0.46503, 0.127528),
		(0.18805, 0.463795, 0.125367),
		(0.184808, 0.46256, 0.123205),
		(0.181566, 0.461325, 0.121044),
		(0.178323, 0.46009, 0.118882),
		(0.175081, 0.458854, 0.116721),
		(0.171839, 0.457619, 0.114559),
		(0.168597, 0.456384, 0.112398),
		(0.165354, 0.455149, 0.110236),
		(0.162112, 0.453914, 0.108075),
		(0.15887, 0.452679, 0.105913),
		(0.155628, 0.451444, 0.103752),
		(0.152385, 0.450208, 0.10159),
		(0.149143, 0.448973, 0.0994287),
		(0.145901, 0.447738, 0.0972673),
		(0.142659, 0.446503, 0.0951058),
		(0.139416, 0.445268, 0.0929443),
		(0.136174, 0.444033, 0.0907828),
		(0.132932, 0.442798, 0.0886213),
		(0.12969, 0.441562, 0.0864598),
		(0.126447, 0.440327, 0.0842983),
		(0.123205, 0.439092, 0.0821368),
		(0.119963, 0.437857, 0.0799753),
		(0.116721, 0.436622, 0.0778138),
		(0.113478, 0.435387, 0.0756523),
		(0.110236, 0.434152, 0.0734908),
		(0.106994, 0.432916, 0.0713293),
		(0.103752, 0.431681, 0.0691678),
		(0.100509, 0.430446, 0.0670063),
		(0.0972673, 0.429211, 0.0648448),
		(0.094025, 0.427976, 0.0626833),
		(0.0907828, 0.426741, 0.0605218),
		(0.0875405, 0.425506, 0.0583604),
		(0.0842983, 0.42427, 0.0561989),
		(0.081056, 0.423035, 0.0540374),
		(0.0778138, 0.4218, 0.0518759),
		(0.0745716, 0.420565, 0.0497144),
		(0.0713293, 0.41933, 0.0475529),
		(0.0680871, 0.418095, 0.0453914),
		(0.0648448, 0.41686, 0.0432299),
		(0.0616026, 0.415625, 0.0410684),
		(0.0583604, 0.414389, 0.0389069),
		(0.0551181, 0.413154, 0.0367454),
		(0.0518759, 0.411919, 0.0345839),
		(0.0486336, 0.410684, 0.0324224),
		(0.0453914, 0.409449, 0.0302609),
		(0.0421491, 0.408214, 0.0280994),
		(0.0389069, 0.406979, 0.0259379),
		(0.0356647, 0.405743, 0.0237764),
		(0.0324224, 0.404508, 0.0216149),
		(0.0291802, 0.403273, 0.0194535),
		(0.0259379, 0.402038, 0.017292),
		(0.0226957, 0.400803, 0.0151305),
		(0.0194535, 0.399568, 0.012969),
		(0.0162112, 0.398333, 0.0108075),
		(0.012969, 0.397097, 0.00864598),
		(0.00972673, 0.395862, 0.00648448),
		(0.00648448, 0.394627, 0.00432299),
		(0.00324224, 0.393392, 0.00216149),
		(0, 0.392157, 0));\n''' +
                    'n29_Integer = 0;\n' +
                    'n30_Integer = 100;\n' +
                    '''n49_Custom_Color = TABLE(
		(0.823529, 0.705882, 0.54902),
		(0.815211, 0.702713, 0.543474),
		(0.806892, 0.699544, 0.537928),
		(0.798574, 0.696376, 0.532383),
		(0.790255, 0.693207, 0.526837),
		(0.781937, 0.690038, 0.521291),
		(0.773619, 0.686869, 0.515746),
		(0.7653, 0.6837, 0.5102),
		(0.756982, 0.680531, 0.504654),
		(0.748663, 0.677362, 0.499109),
		(0.740345, 0.674193, 0.493563),
		(0.732026, 0.671024, 0.488017),
		(0.723708, 0.667855, 0.482472),
		(0.715389, 0.664686, 0.476926),
		(0.707071, 0.661517, 0.47138),
		(0.698752, 0.658348, 0.465835),
		(0.690434, 0.655179, 0.460289),
		(0.682115, 0.65201, 0.454744),
		(0.673797, 0.648841, 0.449198),
		(0.665478, 0.645672, 0.443652),
		(0.65716, 0.642503, 0.438107),
		(0.648841, 0.639335, 0.432561),
		(0.640523, 0.636166, 0.427015),
		(0.632204, 0.632997, 0.42147),
		(0.623886, 0.629828, 0.415924),
		(0.615567, 0.626659, 0.410378),
		(0.607249, 0.62349, 0.404833),
		(0.59893, 0.620321, 0.399287),
		(0.590612, 0.617152, 0.393741),
		(0.582294, 0.613983, 0.388196),
		(0.573975, 0.610814, 0.38265),
		(0.565657, 0.607645, 0.377104),
		(0.557338, 0.604476, 0.371559),
		(0.54902, 0.601307, 0.366013),
		(0.540701, 0.598138, 0.360467),
		(0.532383, 0.594969, 0.354922),
		(0.524064, 0.5918, 0.349376),
		(0.515746, 0.588631, 0.34383),
		(0.507427, 0.585462, 0.338285),
		(0.499109, 0.582294, 0.332739),
		(0.49079, 0.579125, 0.327194),
		(0.482472, 0.575956, 0.321648),
		(0.474153, 0.572787, 0.316102),
		(0.465835, 0.569618, 0.310557),
		(0.457516, 0.566449, 0.305011),
		(0.449198, 0.56328, 0.299465),
		(0.440879, 0.560111, 0.29392),
		(0.432561, 0.556942, 0.288374),
		(0.424242, 0.553773, 0.282828),
		(0.415924, 0.550604, 0.277283),
		(0.407605, 0.547435, 0.271737),
		(0.399287, 0.544266, 0.266191),
		(0.390969, 0.541097, 0.260646),
		(0.38265, 0.537928, 0.2551),
		(0.374332, 0.534759, 0.249554),
		(0.366013, 0.53159, 0.244009),
		(0.357695, 0.528421, 0.238463),
		(0.349376, 0.525253, 0.232917),
		(0.341058, 0.522084, 0.227372),
		(0.332739, 0.518915, 0.221826),
		(0.324421, 0.515746, 0.21628),
		(0.316102, 0.512577, 0.210735),
		(0.307784, 0.509408, 0.205189),
		(0.299465, 0.506239, 0.199643),
		(0.291147, 0.50307, 0.194098),
		(0.282828, 0.499901, 0.188552),
		(0.27451, 0.496732, 0.183007),
		(0.266191, 0.493563, 0.177461),
		(0.257873, 0.490394, 0.171915),
		(0.249554, 0.487225, 0.16637),
		(0.241236, 0.484056, 0.160824),
		(0.232917, 0.480887, 0.155278),
		(0.224599, 0.477718, 0.149733),
		(0.21628, 0.474549, 0.144187),
		(0.207962, 0.47138, 0.138641),
		(0.199643, 0.468212, 0.133096),
		(0.191325, 0.465043, 0.12755),
		(0.183007, 0.461874, 0.122004),
		(0.174688, 0.458705, 0.116459),
		(0.16637, 0.455536, 0.110913),
		(0.158051, 0.452367, 0.105367),
		(0.149733, 0.449198, 0.0998217),
		(0.141414, 0.446029, 0.0942761),
		(0.133096, 0.44286, 0.0887304),
		(0.124777, 0.439691, 0.0831848),
		(0.116459, 0.436522, 0.0776391),
		(0.10814, 0.433353, 0.0720935),
		(0.0998217, 0.430184, 0.0665478),
		(0.0915033, 0.427015, 0.0610022),
		(0.0831848, 0.423846, 0.0554565),
		(0.0748663, 0.420677, 0.0499109),
		(0.0665478, 0.417508, 0.0443652),
		(0.0582294, 0.414339, 0.0388196),
		(0.0499109, 0.411171, 0.0332739),
		(0.0415924, 0.408002, 0.0277283),
		(0.0332739, 0.404833, 0.0221826),
		(0.0249554, 0.401664, 0.016637),
		(0.016637, 0.398495, 0.0110913),
		(0.00831848, 0.395326, 0.00554565),
		(0, 0.392157, 0));\n''' +
                    'n51_Output = $n49_Custom_Color;\n' +
                    'n23_Output = GLOBAL MIN ( $n1_{} ) ;\n'.format(name_original) +
                    'SHOW $n23_Output;\n' +
                    'n20_Output = GLOBAL MAX ( $n1_{} ) ;\n'.format(name_original) +
                    'SHOW $n20_Output;\n' +
                    'n24_Output = GLOBAL STANDARD DEVIATION ( $n1_{} ) ;\n'.format(name_original) +
                    'SHOW $n24_Output;\n' +
                    'n26_Output = ($n20_Output - (1.5 * $n24_Output)) * 100;\n' +
                    'SHOW $n26_Output;\n' +
                    'n25_Output = ((1.5 * $n24_Output) + $n23_Output) * 100;\n' +
                    'SHOW $n25_Output;\n' +
                    'n14_Output = $n12_Custom_Color;\n' +
                    '#define n3_memory Float($n1_{} * 100)\n'.format(name_original) +
                    '#define n5_memory Integer(INTEGER ( $n3_memory ) )\n' +
                    'n9_{} '.format(name_unscaled) + '= CONDITIONAL { \n\n' +
                    '($n5_memory == 0) 0 , \n\n' +
                    '($n5_memory - $n25_Output < 1.0) 1 , \n\n' +
                    '($n5_memory > $n25_Output) (( $n5_memory - $n25_Output) / ($n26_Output - $n25_Output ))  * 100\n\n' +
                    '} ;\n' +
                    'n38_Output = GLOBAL MIN ( $n9_{} );\n'.format(name_unscaled) +
                    'n39_Output = GLOBAL MAX ( $n9_{} );\n'.format(name_unscaled) +
                    'n28_{} = ($n9_{} - $n38_Output) * ($n30_Integer - $n29_Integer) / ($n39_Output - $n38_Output) + $n29_Integer;\n'.format(name_scaled_fltp, name_unscaled) +
                    'n48_{} = INTEGER ( $n28_{} ) ;\n'.format(name_scaled_int, name_scaled_fltp) +
                    'QUIT;')

            f.close()
            f = open(basePath + '/NDVI/ndvi_mos_fc/' + name + '_ndvi_mos_paramB', 'w')
            f.write('5\n'\
                'modeler\n'\
                '-nq\n'\
                + basePath + '/NDVI/ndvi_mos_fc/' + name + '_ndvi_mos_paramA\n'\
                '-meter\n'\
                '-state\n')
            f.close()
            batchList.append(modeler + basePath + '/NDVI/ndvi_mos_fc/' + name + '_ndvi_mos_paramB')
    return batchList

def getBatchFile(batchlist):
    f = open(basePath + '/NDVI/ndvi_mos_fc/' + 'batch_process.bat', 'w')
    for i in range (0, len(batchlist)):
        f.write(str(batchlist[i]).replace('\\', '/') + '\n')
    f.close()


def RunBatch():
    try:
        os.chdir(basePath + '/NDVI/ndvi_mos_fc/')
        os.system('batch_process.bat')
    except WindowsError:
        print('error')

def main():
    print("Script created by: Nikit Parakh")
    print("Contact: parakhni@msu.edu")
    print()
    print ('This script utilises the ndvi mosaic processed images to create scaled and unscaled image files\n')
    print ('The workspace directory is: ', basePath, '\n')

    CheckOutputDir()

    print ('Searching for ERDAS .exe file location')
    ModelerLocation, ImageCommandLocation, ImgCopyLocation = FindModelerExe()
    print ('Done Searching\n')

    file_details = get_ndvi_mosaic_files()
    if len(file_details) != 0:
        print('Files to be processed:')
        pprint.pprint([i[1] + '_ndvi_mos' for i in file_details])
        print()

        print('Generating batchlist for processing')
        batchList = generate_batchlist(file_details, ModelerLocation)

        if len(batchList) == 0:
            print('\nFiles have already been processed!')
        else:
            print('\nCreating Batch File')
            getBatchFile(batchList)

            print ('Running batch file in ERDAS modeler...')
            RunBatch()
    else:
        print('No valid files found for processing')

if __name__ == '__main__':
    main()
